{
    "patches": [
        {
            "label": "2025-02-06_17-31-30",
            "content": "#include <iostream>\n#include <vector>\n#include <sstream>\n#include <iomanip>\nusing namespace std;\n\ntemplate<typename CONTAINER, typename FUNC>\nstring map_join(const CONTAINER& cont, FUNC func, string delim) {\n    stringstream ss;\n    for (auto it = cont.begin(); it != cont.end(); it++) {\n        ss << (it == cont.begin() ? \"\" : delim);\n        ss << func(*it);\n    }\n    return ss.str();\n}\n\nclass Espiral{\n    private:\n        string nome;\n        int qtd;\n        double preco;\n    \n    public:\n        Espiral(string nome, int qtd, double preco) : nome(nome), qtd(qtd), preco(preco){}\n\n        string getNome(){\n            return nome;\n        }\n\n        int getQtd(){\n            return qtd;\n        }\n\n        double getPreco(){\n            return preco;\n        }\n\n        void setNome(string novoNome){\n            this->nome = novoNome;\n        }\n\n        void setQtd(int novoQtd){\n            this->qtd = novoQtd;\n        }\n\n        void setPreco(double novoPreco){\n            this->preco = novoPreco;\n        }\n\n        string str(){\n            stringstream ss;\n            ss << \"[\" << setw(8) << setfill(' ') << nome << \" : \" << qtd << \" U : \" <<fixed << setprecision(2) << preco << \" RS]\" ;\n\n            return ss.str();\n        }\n\n};\n\nclass Maquina{\n    private:\n        vector<Espiral> qtdEspiral;\n        double saldo;\n        double lucro;\n\n    public:\n        Maquina(int numEspiral){\n            qtdEspiral = vector<Espiral>(numEspiral,Espiral(\"empty\", 0, 0));\n            this->saldo = 0.00;\n            this->lucro = 0.00;\n           \n        }\n\n    int getEspiral(int index){\n        if(index < 0 || index > (int) qtdEspiral.size()){\n            std::cout << \"fail: indice nao existe\\n\";\n        }\n        return index;\n    }\n\n    void setEspiral(int index, string nome, int qtd, double preco){\n        if(index < 0 || index > (int) qtdEspiral.size()){\n            std::cout << \"fail: indice nao existe\\n\";\n        }\n       this->qtdEspiral[index] = Espiral(nome, qtd, preco);\n    }\n\n    void limpar(int index){\n        if(index < 0 || index > (int) qtdEspiral.size()){\n            std::cout << \"fail: indice nao existe\\n\";\n        }\n        this->qtdEspiral[index] = Espiral(\"empty\", 0, 0);\n    }\n\n    void inserirDinheiro(double dinheiro){\n        this -> lucro += dinheiro;\n        this->saldo += dinheiro;\n    }\n\n    void troco(){\n        double saida;\n        saida = this->saldo;\n        this->saldo = 0;\n        std::cout << \"voce recebeu \" <<fixed << setprecision(2) << saida <<  \" RS\" << endl;\n    }\n\n    void comprar(int indice){\n        if(indice < 0 || indice >= (int) qtdEspiral.size()){\n            std::cout << \"fail: indice nao existe\\n\";\n            return;\n        }\n        Espiral&  espiral = qtdEspiral[indice];\n        if(espiral.getQtd() <= 0){\n            std::cout << \"fail: espiral sem produtos\\n\";\n            return;\n        }\n        if (espiral.getPreco() > saldo){\n            std::cout << \"fail: saldo insuficiente\\n\";\n            return;\n        }\n\n        espiral.setQtd(espiral.getQtd() - 1);\n        saldo -= espiral.getPreco();\n        std::cout << \"voce comprou um \" << espiral.getNome() << '\\n';\n    }\n\n    string str(){\n        stringstream ss;\n        ss << \"saldo: \" << fixed << setprecision(2) << saldo << endl;\n        for(size_t i = 0; i < qtdEspiral.size(); i++){\n            ss << i << \" \" << qtdEspiral[i].str() << endl;\n        }\n        string saida = ss.str();\n        saida.pop_back();\n        return saida;\n    }\n\n};\n\nint main() {\n    Maquina maquina(3);\n    while (true) {\n        string line, cmd;\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n\n        stringstream ss(line);\n        ss >> cmd;\n\n        try {\n            if (cmd == \"show\") {\n               cout << maquina.str() << endl;\n            } else if (cmd == \"init\") {\n                int n_espirais {};\n                ss >> n_espirais;\n            } else if (cmd == \"limpar\") {\n                int indice {};\n                 ss >> indice;\n                 maquina.limpar(indice);\n            } else if (cmd == \"dinheiro\") {\n                int value {};\n                ss >> value;\n                maquina.inserirDinheiro(value);\n            } else if (cmd == \"comprar\") {\n                 int index {};\n                ss >> index;\n                maquina.comprar(index);\n            } else if (cmd == \"set\") {\n                int index {};\n                string name;\n                int qtd {};\n                double price {};\n                ss >> index >> name >> qtd >> price;\n                maquina.setEspiral(index, name, qtd, price);\n            } else if (cmd == \"troco\") {\n                maquina.troco();\n            } else if (cmd == \"end\") {\n                break;\n            } else {\n                cout << \"comando invalido\" << endl;\n            }\n        } catch (const char* e) {\n            cout << e << endl;\n        }\n    }\n}\n"
        }
    ]
}