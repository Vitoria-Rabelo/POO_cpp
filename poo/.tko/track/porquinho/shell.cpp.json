{
    "patches": [
        {
            "label": "2025-02-27_10-58-46",
            "content": "@@ -110,24 +110,8 @@\n ry%3E%0A\n-#include %3Clist%3E%0A\n usin\n@@ -490,5406 +490,20 @@\n %0A%7D%0A%0A\n-enum class Moeda%7B%0A    C10 = 1,%0A    C25 = 2, %0A    C50 = 3, %0A    R1 = 4%0A%0A%7D;%0A%0AMoeda stringToMoeda(const string& label) %7B%0A    if (label == %2210%22) return Moeda::C10;%0A    if (label == %2225%22) return Moeda::C25;%0A    if (label == %2250%22) return Moeda::C50;%0A    if (label == %22100%22) return Moeda::R1;%0A    throw invalid_argument(%22fail: moeda inv%C3%A1lida%22);%0A%7D%0A%0Aclass Coin%7B%0A    Moeda moeda;%0A    int volume;%0A    string label;%0A%0A    static float getMoeda(Moeda moeda)%7B%0A        switch(moeda)%7B%0A            case Moeda::C10: return 0.10;%0A            case Moeda::C25: return 0.25;%0A            case Moeda::C50: return 0.50;%0A            case Moeda::R1: return 1.00;%0A            default : %0A                return 0.0;%0A        %7D%0A    %7D%0A    %0Apublic:%0A    Coin(Moeda moeda, int volume, string label = %22%22) : moeda(moeda), volume(volume), label(label) %7B%7D%0A%0A    double getValue() const%7B%0A       return getMoeda(moeda);%0A    %7D%0A%0A    int getVolume() const%7B%0A        return this-%3Evolume;%0A    %7D%0A%0A    static int getVolume(Moeda moeda) %7B%0A        switch(moeda) %7B%0A            case Moeda::C10: return 1;%0A            case Moeda::C25: return 2;%0A            case Moeda::C50: return 3;%0A            case Moeda::R1: return 4;%0A            default: return 0;%0A        %7D%0A    %7D%0A    %0A%0A    string getLabel() const%7B%0A        return this-%3Elabel;%0A    %7D%0A%7D;%0A%0Aclass Item %7B%0A    string label;%0A    int volume;%0Apublic:%0A    Item(string label = %22%22, int volume = 0) : label(label), volume(volume) %7B%7D%0A%0A    string getLabel() const%7B %0A        return label;%0A     %7D%0A    int getVolume() const%7B %0A        return volume; %0A    %7D%0A%0A    void setLabel(string label)%7B%0A        this-%3Elabel = label;%0A    %7D%0A%0A    void setVolume(int volume)%7B%0A        this-%3Evolume = volume;%0A    %7D%0A%0A    string toString() const%7B%0A        stringstream ss;%0A        ss %3C%3C label %3C%3C %22:%22 %3C%3C volume;%0A        return ss.str();%0A    %7D%0A%7D;%0Aclass Pig%7B%0A    bool broken;%0A    list%3CCoin%3E coins;%0A    list%3CItem%3E items;%0A    int volumeMax;%0A%0Apublic:%0A    Pig(int volumeMax = 0) : broken(false), volumeMax(volumeMax)%7B%7D;%0A%0A    int getTotalVolume() const %7B%0A        int totalVolume = 0;%0A        for(const auto& coin : coins) %7B%0A            totalVolume += coin.getVolume();%0A        %7D%0A        for(const auto& item : items) %7B%0A            totalVolume += item.getVolume();%0A        %7D%0A        return totalVolume;%0A    %7D%0A    %0A%0A    void addCoin(Coin coin)%7B%0A        if(broken == true)%7B%0A            cout %3C%3C %22fail: the pig is broken%5Cn%22;%0A            return;%0A        %7D%0A        if(getTotalVolume() + coin.getVolume() %3E volumeMax)%7B%0A            cout %3C%3C %22fail: the pig is full%5Cn%22;%0A            return;%0A        %7D%0A        coins.push_back(coin);%0A    %7D%0A%0A    void addItem(Item item)%7B%0A        if(broken == true)%7B%0A            cout %3C%3C %22fail: the pig is broken%5Cn%22;%0A            return;%0A        %7D%0A        if(getTotalVolume() + item.getVolume() %3E volumeMax)%7B%0A            cout %3C%3C %22fail: the pig is full%5Cn%22;%0A            return;%0A        %7D%0A        items.push_back(item);%0A    %7D%0A%0A    void breakPig()%7B%0A        broken = true;%0A    %7D%0A%0A    void extractCoins()%7B%0A        if(broken == false)%7B%0A            cout %3C%3C %22fail: you must break the pig first%5Cn%22 %3C%3C %22%5B%5D%5Cn%22;%0A            return;%0A        %7D%0A        cout %3C%3C map_join(coins, %5B%5D(const Coin& coin) %7B%0A            stringstream ss;%0A            ss %3C%3C fixed %3C%3C setprecision(2) %3C%3C coin.getValue() %3C%3C %22:%22 %3C%3C coin.getVolume();%0A            return ss.str();%0A        %7D);%0A        cout %3C%3C endl;%0A        coins.clear();%0A       %0A    %7D%0A%0A    void extractItems()%7B%0A        if(broken == false)%7B%0A            cout %3C%3C %22fail: you must break the pig first%5Cn%22 %3C%3C %22%5B%5D%5Cn%22;%0A            return;%0A        %7D%0A        cout %3C%3C map_join(items, %5B%5D(const Item& item)%7Breturn item.toString();%7D) %3C%3C endl ;%0A        items.clear();%0A    %7D%0A%0A    void show() const%7B%0A        if(broken == true)%7B%0A            cout %3C%3C %22state=broken %22;%0A            cout %3C%3C %22: coins=%22 %3C%3C map_join(coins, %5B%5D(const Coin& coin) %7B%0A                stringstream ss;%0A                ss %3C%3C fixed %3C%3C setprecision(2) %3C%3C coin.getValue() %3C%3C %22:%22 %3C%3C coin.getVolume();%0A                return ss.str();%0A            %7D);%0A            cout %3C%3C  %22 : items=%22 %3C%3C map_join(items, %5B%5D(const Item& item)%7Breturn item.toString();%7D) ;%0A            cout %3C%3C %22 : value=%22;%0A            double moedaTotal = 0.0;%0A                for (const auto& coin : coins) %7B%0A                moedaTotal += coin.getValue();%0A            %7D%0A            cout %3C%3C fixed %3C%3C setprecision(2) %3C%3C moedaTotal %3C%3C %22 : volume=%22;%0A            cout %3C%3C %220/%22 %3C%3C volumeMax %3C%3C endl;%0A            return;%0A        %7D %0A        cout %3C%3C %22state=intact %22;%0A        cout %3C%3C %22: coins=%22 %3C%3C map_join(coins, %5B%5D(const Coin& coin) %7B%0A            stringstream ss;%0A            ss %3C%3C fixed %3C%3C setprecision(2) %3C%3C coin.getValue() %3C%3C %22:%22 %3C%3C coin.getVolume();%0A            return ss.str();%0A        %7D);%0A        cout %3C%3C  %22 : items=%22 %3C%3C map_join(items, %5B%5D(const Item& item)%7Breturn item.toString();%7D) ;%0A        cout %3C%3C %22 : value=%22;%0A        double moedaTotal = 0.0;%0A            for (const auto& coin : coins) %7B%0A            moedaTotal += coin.getValue();%0A        %7D%0A        cout %3C%3C fixed %3C%3C setprecision(2) %3C%3C moedaTotal %3C%3C %22 : volume=%22;%0A        int totalVolume = 0;%0A            for (const auto& coin : coins) %7B%0A                totalVolume += coin.getVolume();%0A            %7D%0A            for (const auto& item : items) %7B%0A                totalVolume += item.getVolume();%0A            %7D%0A        cout %3C%3C totalVolume %3C%3C %22/%22 %3C%3C volumeMax %3C%3C endl;%0A    %7D%0A%7D;%0Aint main() %7B%0A    Pig pig;%0A    Coin c(Moeda::C50, 1, %2250 centavos%22);;%0A    Item item;\n+int main() %7B\n %0A   \n@@ -744,32 +744,38 @@\n nit%22) %7B%0A        \n+    //\n  int volumeMax;%0A\n@@ -778,24 +778,30 @@\n ax;%0A        \n+    //\n  ss %3E%3E volum\n@@ -810,39 +810,8 @@\n ax;%0A\n-         pig = Pig(volumeMax);%0A\n     \n@@ -846,32 +846,8 @@\n ) %7B%0A\n-            pig.show();%0A\n     \n@@ -883,36 +883,8 @@\n ) %7B%0A\n-            pig.breakPig();%0A\n     \n@@ -921,32 +921,35 @@\n %22) %7B%0A           \n+ //\n  string label;%0A \n@@ -950,32 +950,35 @@\n bel;%0A           \n+ //\n  ss %3E%3E label;%0A  \n@@ -987,60 +987,66 @@\n     \n-try %7B%0A            Moeda moeda = stringToMoeda(\n+%7D else if (cmd == %22addItem%22) %7B%0A            // string \n label\n-)\n ;%0A  \n@@ -1046,32 +1046,35 @@\n bel;%0A           \n+ //\n  int volume = Co\n@@ -1072,176 +1072,47 @@\n lume\n- = Coin::getVolume(moeda); %0A            pig.addCoin(Coin(moeda, volume, label)); %0A        %7D catch (const exception& e) %7B%0A            cout %3C%3C e.what() %3C%3C endl;%0A        %7D\n+;%0A            // ss %3E%3E label %3E%3E volume;\n %0A   \n@@ -1127,39 +1127,44 @@\n lse if (cmd == %22\n-add\n+extract\n Item\n+s\n %22) %7B%0A           \n@@ -1168,126 +1168,95 @@\n     \n-string label;%0A            int volume;%0A            ss %3E%3E label %3E%3E volume;%0A            pig.addItem(Item(label, volume));\n+// Obtenha os itens com o m%C3%A9todo extractItems%0A            // e imprima os itens obtidos\n %0A   \n@@ -1278,36 +1278,36 @@\n (cmd == %22extract\n-Item\n+Coin\n s%22) %7B%0A          \n@@ -1312,55 +1312,42 @@\n     \n-pig.extractItems();%0A        %7D else if (cmd == %22\n+// Obtenha as moedas com o m%C3%A9todo \n extr\n@@ -1346,36 +1346,32 @@\n odo extractCoins\n-%22) %7B\n %0A            pig\n@@ -1371,27 +1371,38 @@\n     \n-pig.extractCoins();\n+// e imprima as moedas obtidas\n %0A   \n"
        },
        {
            "label": "2025-03-07_18-54-56",
            "content": "#include <iostream>\n#include <vector>\n#include <sstream>\n#include <utility>\n#include <iomanip>\n#include <memory>\n#include <list>\nusing namespace std;\n\ntemplate <typename CONTAINER, typename FN>\nstring map_join(const CONTAINER& container, FN fn, string sep = \", \", string prefix = \"[\", string suffix = \"]\") {\n    stringstream ss;\n    for (auto it = container.begin(); it != container.end(); ++it) {\n        ss << (it != container.begin() ? sep : \"\") << fn(*it);\n    }\n    return prefix + ss.str() + suffix;\n}\n\nenum class Moeda{\n    C10 = 1,\n    C25 = 2, \n    C50 = 3, \n    R1 = 4\n\n};\n\nMoeda stringToMoeda(const string& label) {\n    if (label == \"10\") return Moeda::C10;\n    if (label == \"25\") return Moeda::C25;\n    if (label == \"50\") return Moeda::C50;\n    if (label == \"100\") return Moeda::R1;\n    throw invalid_argument(\"fail: moeda inv\u00e1lida\");\n}\n\nclass Coin{\n    Moeda moeda;\n    int volume;\n    string label;\n\n    static float getMoeda(Moeda moeda){\n        switch(moeda){\n            case Moeda::C10: return 0.10;\n            case Moeda::C25: return 0.25;\n            case Moeda::C50: return 0.50;\n            case Moeda::R1: return 1.00;\n            default : \n                return 0.0;\n        }\n    }\n    \npublic:\n    Coin(Moeda moeda, int volume, string label = \"\") : moeda(moeda), volume(volume), label(label) {}\n\n    double getValue() const{\n       return getMoeda(moeda);\n    }\n\n    int getVolume() const{\n        return this->volume;\n    }\n\n    static int getVolume(Moeda moeda) {\n        switch(moeda) {\n            case Moeda::C10: return 1;\n            case Moeda::C25: return 2;\n            case Moeda::C50: return 3;\n            case Moeda::R1: return 4;\n            default: return 0;\n        }\n    }\n    \n\n    string getLabel() const{\n        return this->label;\n    }\n};\n\nclass Item {\n    string label;\n    int volume;\npublic:\n    Item(string label = \"\", int volume = 0) : label(label), volume(volume) {}\n\n    string getLabel() const{ \n        return label;\n     }\n    int getVolume() const{ \n        return volume; \n    }\n\n    void setLabel(string label){\n        this->label = label;\n    }\n\n    void setVolume(int volume){\n        this->volume = volume;\n    }\n\n    string toString() const{\n        stringstream ss;\n        ss << label << \":\" << volume;\n        return ss.str();\n    }\n};\nclass Pig{\n    bool broken;\n    list<Coin> coins;\n    list<Item> items;\n    int volumeMax;\n\npublic:\n    Pig(int volumeMax = 0) : broken(false), volumeMax(volumeMax){};\n\n    int getTotalVolume() const {\n        int totalVolume = 0;\n        for(const auto& coin : coins) {\n            totalVolume += coin.getVolume();\n        }\n        for(const auto& item : items) {\n            totalVolume += item.getVolume();\n        }\n        return totalVolume;\n    }\n    \n\n    void addCoin(Coin coin){\n        if(broken == true){\n            cout << \"fail: the pig is broken\\n\";\n            return;\n        }\n        if(getTotalVolume() + coin.getVolume() > volumeMax){\n            cout << \"fail: the pig is full\\n\";\n            return;\n        }\n        coins.push_back(coin);\n    }\n\n    void addItem(Item item){\n        if(broken == true){\n            cout << \"fail: the pig is broken\\n\";\n            return;\n        }\n        if(getTotalVolume() + item.getVolume() > volumeMax){\n            cout << \"fail: the pig is full\\n\";\n            return;\n        }\n        items.push_back(item);\n    }\n\n    void breakPig(){\n        broken = true;\n    }\n\n    void extractCoins(){\n        if(broken == false){\n            cout << \"fail: you must break the pig first\\n\" << \"[]\\n\";\n            return;\n        }\n        cout << map_join(coins, [](const Coin& coin) {\n            stringstream ss;\n            ss << fixed << setprecision(2) << coin.getValue() << \":\" << coin.getVolume();\n            return ss.str();\n        });\n        cout << endl;\n        coins.clear();\n       \n    }\n\n    void extractItems(){\n        if(broken == false){\n            cout << \"fail: you must break the pig first\\n\" << \"[]\\n\";\n            return;\n        }\n        cout << map_join(items, [](const Item& item){return item.toString();}) << endl ;\n        items.clear();\n    }\n\n    void show() const{\n        if(broken == true){\n            cout << \"state=broken \";\n            cout << \": coins=\" << map_join(coins, [](const Coin& coin) {\n                stringstream ss;\n                ss << fixed << setprecision(2) << coin.getValue() << \":\" << coin.getVolume();\n                return ss.str();\n            });\n            cout <<  \" : items=\" << map_join(items, [](const Item& item){return item.toString();}) ;\n            cout << \" : value=\";\n            double moedaTotal = 0.0;\n                for (const auto& coin : coins) {\n                moedaTotal += coin.getValue();\n            }\n            cout << fixed << setprecision(2) << moedaTotal << \" : volume=\";\n            cout << \"0/\" << volumeMax << endl;\n            return;\n        } \n        cout << \"state=intact \";\n        cout << \": coins=\" << map_join(coins, [](const Coin& coin) {\n            stringstream ss;\n            ss << fixed << setprecision(2) << coin.getValue() << \":\" << coin.getVolume();\n            return ss.str();\n        });\n        cout <<  \" : items=\" << map_join(items, [](const Item& item){return item.toString();}) ;\n        cout << \" : value=\";\n        double moedaTotal = 0.0;\n            for (const auto& coin : coins) {\n            moedaTotal += coin.getValue();\n        }\n        cout << fixed << setprecision(2) << moedaTotal << \" : volume=\";\n        int totalVolume = 0;\n            for (const auto& coin : coins) {\n                totalVolume += coin.getVolume();\n            }\n            for (const auto& item : items) {\n                totalVolume += item.getVolume();\n            }\n        cout << totalVolume << \"/\" << volumeMax << endl;\n    }\n};\nint main() {\n    Pig pig;\n    Coin c(Moeda::C50, 1, \"50 centavos\");;\n    Item item;\n    while (true) {\n        string line, cmd;\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n\n        stringstream ss(line);\n        ss >> cmd;\n\n        if (cmd == \"end\") {\n            break;\n        } else if (cmd == \"init\") {\n         int volumeMax;\n         ss >> volumeMax;\n         pig = Pig(volumeMax);\n        } else if (cmd == \"show\") {\n            pig.show();\n        } else if (cmd == \"break\") {\n            pig.breakPig();\n        } else if (cmd == \"addCoin\") {\n            string label;\n            ss >> label;\n        try {\n            Moeda moeda = stringToMoeda(label);\n            int volume = Coin::getVolume(moeda); \n            pig.addCoin(Coin(moeda, volume, label)); \n        } catch (const exception& e) {\n            cout << e.what() << endl;\n        }\n        } else if (cmd == \"addItem\") {\n            string label;\n            int volume;\n            ss >> label >> volume;\n            pig.addItem(Item(label, volume));\n        } else if (cmd == \"extractItems\") {\n            pig.extractItems();\n        } else if (cmd == \"extractCoins\") {\n            pig.extractCoins();\n        } else {\n            cout << \"fail: invalid command\\n\";\n        }\n    }\n}\n"
        }
    ]
}