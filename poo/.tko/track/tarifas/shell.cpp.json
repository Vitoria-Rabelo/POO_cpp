{
    "patches": [
        {
            "label": "2025-03-07_16-55-28",
            "content": "#include <iostream>\n#include <vector>\n#include <sstream>\n#include <iomanip>\n#include <list>\nusing namespace std;\n\ntemplate<typename CONTAINER, typename FUNC>\nstring join(const CONTAINER& cont, FUNC func, const string& delim) {\n    stringstream ss;\n    for (auto it = cont.begin(); it != cont.end(); it++) {\n        ss << (it == cont.begin() ? \"\" : delim) << func(*it);\n    }\n    return ss.str();\n}\n\nenum Label {\n    DEPOSIT,\n    FEE,\n    OPENING,\n    REVERSE,\n    WITHDRAW,\n    ERROR\n};\n\nclass Operation {\n    int index;\n    Label label;\n    int value;\n    int balance;\n\npublic:\n    Operation(int index, Label label, int value, int balance) \n        : index(index), label(label), value(value), balance(balance) {};\n\n    int getIndex() const {\n        return index;\n    }\n\n    Label getLabel() const {\n        return label;\n    }\n\n    int getValue() const {\n        return value;\n    }\n\n    int getBalance() const {\n        return balance;\n    }\n\n    string str() const {\n        stringstream ss;\n        ss << setw(2) << index << \": \";\n        switch (label) {\n            case DEPOSIT:\n                ss << \" deposit:\" << setw(5) << value;\n                break;\n            case FEE: \n                if(value > 9) {\n                    ss << \"     fee:\" << setw(3) << \"-\" << value;\n                } else\n                ss << \"     fee:\" << setw(4) << \"-\" << value;\n                break;\n            case OPENING: \n                ss << \" opening:\" << setw(5) << value;\n                break;\n            case REVERSE: \n                ss << \" reverse:\" << setw(5) << value; \n                break;\n            case WITHDRAW: \n                ss << \"withdraw:\" << setw(3) << \"-\" << value ; \n                break;\n            case ERROR: \n                ss << \"   error:\" << setw(5) << value; \n                break;\n        }\n\n\n        ss << \": \" << setw(4) << balance;\n        return ss.str();\n    }\n};\n\nclass BalanceManager {\n    int balance;\n    int nextId;\n    list<Operation> extract;\n\npublic:\n    BalanceManager(int balance = 0) : balance(balance), nextId(0) {\n        addOperation(OPENING, balance);\n    }\n\n    int getBalance() const {\n        return balance;\n    }\n\n    void addOperation(Label label, int value) {\n        if (label == DEPOSIT) {\n            balance += value;\n        } else if (label == WITHDRAW || label == FEE) {\n            balance -= value;\n        }\n        Operation op(nextId++, label, value, balance);\n        extract.push_back(op);\n    }\n\n    void extractBalance(int qtd) const {\n        int count = 0;\n        if(qtd == 0){\n            for (const auto& op : extract) {\n                if (count >= qtd && qtd != 0) break;\n                cout << op.str() << endl; \n                count++;\n            }\n        }\n        else{\n            vector<Operation> lastOps;\n        size_t limit = static_cast<size_t>(qtd); \n\n        for (auto rit = extract.rbegin(); rit != extract.rend() && lastOps.size() < limit; ++rit) {\n            lastOps.push_back(*rit);\n        }\n        for (auto it = lastOps.rbegin(); it != lastOps.rend(); ++it) {\n            cout << it->str() << endl;\n        }\n        }\n        \n    }\n\n    const list<Operation>& getExtract() const {\n        return extract;\n    }\n\n    void show() const {\n        cout << \"balance:\" << balance << endl;\n    }\n};\n\nclass Account {\n    int id;\n    BalanceManager balanceManager;\n\npublic:\n    Account(int id = 0, int initBalance = 0) : id(id), balanceManager(initBalance) {}\n\n    void deposit(int value) {\n        if (value < 0) {\n            cout << \"fail: invalid value\" << endl;\n            return;\n        }\n        balanceManager.addOperation(DEPOSIT, value);\n    }\n\n    void withdraw(int value) {\n        if (value > balanceManager.getBalance()) {\n            cout << \"fail: insufficient balance\" << endl;\n            return;\n        }\n        balanceManager.addOperation(WITHDRAW, value);\n    }\n\n    void fee(int value) {\n        balanceManager.addOperation(FEE, value);\n    }\n\n    void extract(int qtd) {\n        balanceManager.extractBalance(qtd);\n    }\n\n    void reverse(const vector<int>& values) {\n        const list<Operation>& operations = balanceManager.getExtract();\n    \n        for (int value : values) {\n            auto it = operations.end();\n            while (it != operations.begin()) {\n                --it; \n                if (it->getIndex() == value) {\n                    if (it->getLabel() != FEE) {\n                        cout << \"fail: index \" << value << \" is not a fee\" << endl;\n                    } else {\n                        balanceManager.addOperation(REVERSE, it->getValue());\n                        balanceManager.addOperation(DEPOSIT, it->getValue());\n                    }\n                    goto next_value;\n                }\n            }\n            cout << \"fail: index \" << value << \" invalid\" << endl;\n        next_value:;\n        }\n    }\n\n    void show() const {\n        cout << \"account:\" << id << \" \";\n        balanceManager.show();\n    }\n};\n\nint main() {\n    Account account(0);\n    while (true) {\n        string line, cmd;\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n\n        stringstream ss(line);\n        ss >> cmd;\n\n        if (cmd == \"end\") {\n            break;\n        } else if (cmd == \"init\") {\n            int number;\n            ss >> number;\n            account = Account(number);\n        } else if (cmd == \"show\") {\n            account.show();\n        } else if (cmd == \"deposit\") {\n            int value;\n            ss >> value;\n            account.deposit(value);\n        } else if (cmd == \"withdraw\") {\n            int value;\n            ss >> value;\n            account.withdraw(value);\n        } else if (cmd == \"fee\") {\n            int value;\n            ss >> value;\n            account.fee(value);\n        } else if (cmd == \"extract\") {\n            int qtd;\n            ss >> qtd;\n            account.extract(qtd);\n        } else if(cmd == \"reverse\"){\n            vector<int> values;\n            int value;\n            while (ss >> value) { \n                values.push_back(value);\n            }\n            account.reverse(values);\n        }else {\n            cout << \"fail: invalid command\\n\";\n        }\n    }\n    return 0;\n}"
        }
    ]
}