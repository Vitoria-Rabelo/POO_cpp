{
    "patches": [
        {
            "label": "2025-03-07_18-55-42",
            "content": "#include <iostream>\n#include <vector>\n#include <sstream>\n#include <algorithm>\nusing namespace std;\n\ntemplate <typename CONTAINER, typename FUNC>\nstring map_join(const CONTAINER& cont, FUNC func, string sep = \" \") {\n    stringstream ss;\n    for (auto it = cont.begin(); it != cont.end(); it++) {\n        ss << (it == cont.begin() ? \"\" : sep);\n        ss << func(*it);\n    }\n    return ss.str();\n}\n\npair<string, string> decodeFone(string fone) {\n    stringstream ss(fone);\n    string id, number;\n    getline(ss, id, ':');\n    getline(ss, number);\n    return {id, number};\n}\n\nclass Fone {\n    string id;\n    string number;\npublic:\n    Fone(string id = \"\", string number = \"\") : id(id), number(number) {}\n\n    string getId() { return id; }\n    string getNumber() { return number; }\n\n    bool isValid() {\n        string validos = \"0123456789().-\";\n        for (char c : number) {\n            if (validos.find(c) == string::npos) {\n                cout << \"fail: invalid number\" << endl;\n                return false;\n            }\n        }\n        return true;\n    }\n\n    string toString() { return id + \":\" + number; }\n};\n\nclass Contact {\n    string name;\n    bool favorited;\n    vector<Fone> fones;\npublic:\n    Contact(string name = \"\") : name(name), favorited(false) {}\n\n    string getName() { return name; }\n    void setName(string name) { this->name = name; }\n    bool isFavorited() { return favorited; }\n    void toggleFavorited() { favorited = !favorited; }\n    vector<Fone> getFones() { return fones; }\n\n    void addFone(string id, string number) {\n        Fone fone(id, number);\n        if (fone.isValid()) {\n            fones.push_back(fone);\n        }\n    }\n\n    void rmFone(int index) {\n        if (index >= 0 && index < (int)fones.size()) {\n            fones.erase(fones.begin() + index);\n        }\n    }\n\n    string toString() {\n        stringstream ss;\n        ss << (favorited ? \"@ \" : \"- \") << name << \" [\" \n           << map_join(fones, [](Fone f) { return f.toString(); }, \", \") << \"]\";\n        return ss.str();\n    }\n};\n\nclass Agenda {\n    vector<Contact> contacts;\n\n    int findPosByName(string name) {\n        for (size_t i = 0; i < contacts.size(); i++) {\n            if (contacts[i].getName() == name)\n                return i;\n        }\n        return -1;\n    }\n\npublic:\n    void addContact(string name, vector<Fone> fones) {\n        int pos = findPosByName(name);\n        if (pos != -1) {\n            for (auto& f : fones) {\n                contacts[pos].addFone(f.getId(), f.getNumber());\n            }\n        } else {\n            Contact contact(name);\n            for (auto& f : fones) {\n                contact.addFone(f.getId(), f.getNumber());\n            }\n            contacts.push_back(contact);\n            sort(contacts.begin(), contacts.end(), [](Contact a, Contact b) {\n                return a.getName() < b.getName();\n            });\n        }\n    }\n\n    Contact* getContact(string name) {\n        int pos = findPosByName(name);\n        if (pos != -1) return &contacts[pos];\n        return nullptr;\n    }\n\n    void rmContact(string name) {\n        int pos = findPosByName(name);\n        if (pos != -1) {\n            contacts.erase(contacts.begin() + pos);\n        }\n    }\n\n    vector<Contact> search(string pattern) {\n        vector<Contact> result;\n        for (auto& c : contacts) {\n            if (c.toString().find(pattern) != string::npos) {\n                result.push_back(c);\n            }\n        }\n        return result;\n    }\n\n    vector<Contact> getFavorited() {\n        vector<Contact> result;\n        for (auto& c : contacts) {\n            if (c.isFavorited()) {\n                result.push_back(c);\n            }\n        }\n        return result;\n    }\n\n    vector<Contact> getContacts() { return contacts; }\n\n    string toString() {\n        return map_join(contacts, [](Contact c) { return c.toString(); }, \"\\n\");\n    }\n};\n\nint main() {\n    Agenda agenda;\n    string line, cmd;\n    while (true) {\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n        stringstream ss(line);\n        ss >> cmd;\n\n        if (cmd == \"end\") {\n            break;\n        } else if (cmd == \"add\") {\n            string name, token;\n            ss >> name;\n            vector<Fone> fones;\n            while (ss >> token) {\n                auto [id, number] = decodeFone(token);\n                fones.push_back(Fone(id, number));\n            }\n            agenda.addContact(name, fones);\n        } else if (cmd == \"show\") {\n            cout << agenda.toString() << endl;\n        } else if (cmd == \"rmFone\") {\n            string name;\n            int index;\n            ss >> name >> index;\n            Contact* contact = agenda.getContact(name);\n            if (contact) {\n                contact->rmFone(index);\n            }\n        }else if ( cmd == \"rm\"){\n            string name;\n            ss >> name;\n            agenda.rmContact(name);\n        } else if (cmd == \"search\") {\n            string pattern;\n            ss >> pattern;\n            cout << map_join(agenda.search(pattern), [](Contact c) { return c.toString(); }, \"\\n\") << endl;\n        } else if (cmd == \"tfav\") {\n            string name;\n            ss >> name;\n            Contact* contact = agenda.getContact(name);\n            if (contact) {\n                contact->toggleFavorited();\n            }\n        } else if (cmd == \"showFav\") {\n            cout << map_join(agenda.getFavorited(), [](Contact c) { return c.toString(); }, \"\\n\") << endl;\n\n        }else if (cmd == \"favs\") {\n            vector<Contact> favs = agenda.getFavorited();\n            cout << map_join(favs, [](Contact c) { return c.toString(); }, \"\\n\") << endl;\n        }\n        else {\n            cout << \"fail: comando invalido\" << endl;\n        }\n    }\n}\n"
        }
    ]
}