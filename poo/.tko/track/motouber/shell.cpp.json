{
    "patches": [
        {
            "label": "2024-12-13_20-03-05",
            "content": "@@ -1,16 +1,81 @@\n+#define __MEMORY //enable print for shared_ptr%0A#include %22fn.hpp%22%0A\n #include %3Ciostre\n@@ -77,34 +77,16 @@\n ostream%3E\n-%0A#include %22fn.hpp%22\n %0A%0Aclass \n@@ -157,17 +157,16 @@\n iro%7B0%7D;%0A\n-%0A\n     publ\n@@ -204,13 +204,8 @@\n nome\n- = %22%22\n , in\n@@ -218,36 +218,68 @@\n eiro\n- = 0): \n+)%7B%0A            this-%3E\n nome\n-(\n+ = \n nome\n-) , \n+;%0A            this-%3E\n dinheiro\n (din\n@@ -274,25 +274,27 @@\n dinheiro\n-(\n+ = \n dinheiro\n )%7B%7D%0A%0A   \n@@ -285,18 +285,26 @@\n dinheiro\n-)%7B\n+;%0A        \n %7D%0A%0A     \n@@ -456,170 +456,58 @@\n     \n-void passageiroPagando(int distanciaPercorrida)%7B%0A            if(dinheiro %3C distanciaPercorrida)%7B%0A                dinheiro = 0;%0A            %7Delse%7B%0A                \n+int setDinheiro(int novoValor)%7B%0A            this-%3E\n dinh\n@@ -515,158 +515,19 @@\n iro \n--\n = \n-distanciaPercorrida;%0A            %7D%0A        %7D%0A%0A        void motoristaRecebendo(int distanciaPercorrida)%7B%0A            dinheiro += distanciaPercorrida\n+novoValor\n ;%0A  \n@@ -525,32 +525,33 @@\n Valor;%0A        %7D\n+ \n %0A%0A        std::s\n@@ -561,22 +561,16 @@\n ng str()\n- const\n %7B%0A      \n@@ -646,16 +646,17 @@\n  %7D%0A%0A%7D;%0A%0A\n+%0A\n class Mo\n@@ -726,25 +726,27 @@\n Pessoa%3E \n-motorista\n+ passageiro\n %7Bnullptr\n@@ -780,26 +780,25 @@\n Pessoa%3E \n-passageiro\n+motorista\n %7Bnullptr\n@@ -831,41 +831,57 @@\n to()\n-: custo(0) , motorista(nullptr), \n+%7B%0A            this-%3Ecusto = 0;%0A            this-%3E\n pass\n@@ -890,20 +890,19 @@\n eiro\n-(\n+ = \n nullptr\n-)%7B%7D%0A\n+;\n %0A   \n@@ -910,55 +910,37 @@\n     \n-int getCusto() const %7B%0A            return custo\n+    this-%3Emotorista = nullptr\n ;%0A  \n@@ -952,35 +952,28 @@\n  %7D%0A%0A        \n-std::string\n+void\n  setDriver(s\n@@ -999,22 +999,21 @@\n oa%3E moto\n-queiro\n+rista\n )%7B%0A     \n@@ -1011,35 +1011,32 @@\n a)%7B%0A            \n-if(\n this-%3Emotorista \n@@ -1039,926 +1039,279 @@\n sta \n-!\n = \n-nullptr)%7B%0A                return %22Falha: j%C3%A1 existe motorista%5Cn%22;%0A            %7D%0A            motorista = motoqueiro;%0A            return %22Motorista est%C3%A1 na moto%5Cn%22;%0A        %7D%0A%0A        std::string setPass(std::shared_ptr%3CPessoa%3E passageiro)%7B%0A            if(this-%3Emotorista == nullptr)%7B%0A                return %22Falha, n%C3%A3o h%C3%A1 motorista%5Cn%22;%0A            %7D%0A            this-%3Epassageiro = passageiro;%0A            return %22passageiro subiu na moto%5Cn%22;%0A        %7D%0A%0A        std::string dirigir(int distancia)%7B%0A            if(motorista == nullptr)%7B%0A                return %22Falha, n%C3%A3o h%C3%A1 motorista%5Cn%22;%0A            %7D%0A            if(passageiro == nullptr)%7B%0A                return %22Falha, n%C3%A3o h%C3%A1 passageiro%5Cn%22;%0A            %7D%0A            %0A            custo += distancia;%0A            return %22A moto est%C3%A1 andando%5Cn%22;%0A        %7D%0A%0A        std::string leavePass()%7B%0A            if(passageiro == nullptr)%7B%0A                return %22Falha, n%C3%A3o h%C3%A1 \n+motorista;%0A        %7D%0A%0A        void setPass(std::shared_ptr%3CPessoa%3E passageiro)%7B%0A            this-%3Epassageiro = passageiro;%0A        %7D%0A%0A        std::string str()%7B%0A            return fn::format(%22Const: %7B%7D, Driver: %7B%7D, Passenger: %7B%7D%5Cn%22, this-%3Ecusto, this-%3Emotorista, this-%3E\n pass\n@@ -1316,32 +1316,27 @@\n ssageiro\n-%5Cn%22;%0A   \n+);%0A\n         \n  %7D%0A     \n@@ -1319,34 +1319,34 @@\n geiro);%0A        \n- \n %7D\n+%0A\n %0A            if \n@@ -1342,51 +1342,22 @@\n     \n-    if (passageiro-%3EgetDinhe\n+void dirig\n ir\n-o\n ()\n- %3C custo) \n %7B%0A  \n@@ -1370,751 +1370,170 @@\n     \n-    std::cout %3C%3C %22fail: Passenger does not have enough money%5Cn%22;%0A            %7D%0A            motorista-%3EmotoristaRecebendo(custo);%0A            passageiro-%3EpassageiroPagando(custo);%0A            std::string mensagem = fn::format(%22%7B%7D:%7B%7D leave%5Cn%22, passageiro-%3EgetNome(), passageiro-%3EgetDinheiro());%0A            custo = 0;%0A            passageiro = nullptr;%0A            return mensagem;%0A        %7D%0A%0A        std::string str() const %7B%0A            std::string motoristaStr = motorista ? motorista-%3Estr() : %22None%22;%0A            std::string passageiroStr = passageiro ? passageiro-%3Estr() : %22None%22;%0A            return fn::format(%22Cost: %7B%7D, Driver: %7B%7D, Passenger: %7B%7D%22, custo, motoristaStr, passageiroStr);%0A        %7D%0A%7D;%0A%0A%0Aclass Adapter %7B%0A    Moto moto;%0Apublic:%0A\n+if(this-%3Emotorista == nullptr)%7B%0A                return;%0A            %7D%0A        %7D%0A%0A        %0A%0A%7D;%0A%0Aclass Adapter%7B%0A    Moto moto;%0A    public:%0A        Adapter()%7B%7D %0A    \n     \n@@ -1570,34 +1570,34 @@\n e, int dinheiro)\n- \n %7B\n+%0A\n %0A        moto.se\n@@ -1593,72 +1593,15 @@\n     \n-moto.setDriver(std::make_shared%3CPessoa%3E(nome, dinheiro));\n+%7D%0A\n %0A    \n-%7D%0A\n     \n@@ -1644,18 +1644,18 @@\n inheiro)\n- \n %7B\n+%0A\n %0A       \n@@ -1659,70 +1659,15 @@\n     \n-moto.setPass(std::make_shared%3CPessoa%3E(nome, dinheiro));\n+%7D%0A\n %0A    \n-%7D%0A\n     \n@@ -1688,28 +1688,29 @@\n  distanc\n-e) %7B\n+ia)%7B%0A\n %0A       \n moto.dir\n@@ -1705,38 +1705,16 @@\n     \n-moto.dirigir(distance);\n+ %7D%0A\n %0A    \n-%7D%0A\n     \n@@ -1733,52 +1733,26 @@\n ss()\n- \n %7B\n+%0A\n %0A    \n-std::cout %3C%3C moto.leavePass();\n+    %7D%0A\n %0A    \n-%7D%0A\n     \n@@ -1762,17 +1762,16 @@\n d show()\n- \n %7B%0A      \n@@ -1776,47 +1776,28 @@\n     \n-std::cout %3C%3C moto.str() %3C%3C std::endl;%0A%0A\n+    moto.str();%0A    \n     \n"
        },
        {
            "label": "2024-12-15_22-46-57",
            "content": "#include <iostream>\n#include \"fn.hpp\"\n\nclass Pessoa{\n    private:\n        std::string nome;\n        int dinheiro{0};\n\n    public:\n        Pessoa(std::string nome = \"\", int dinheiro = 0): nome(nome) , dinheiro(dinheiro){}\n\n        std::string getNome() const{\n            return nome;\n        }\n\n        int getDinheiro() const{\n            return dinheiro;\n        }\n\n        void passageiroPagando(int distanciaPercorrida){\n            if(dinheiro < distanciaPercorrida){\n                dinheiro = 0;\n            }else{\n                dinheiro -= distanciaPercorrida;\n            }\n        }\n\n        void motoristaRecebendo(int distanciaPercorrida){\n            dinheiro += distanciaPercorrida;\n        }\n\n        std::string str() const{\n            return fn::format(\"{}:{}\", this->nome, this->dinheiro);\n        }\n\n};\n\nclass Moto{\n    private:\n        int custo{0};\n        std::shared_ptr<Pessoa> motorista{nullptr};\n        std::shared_ptr<Pessoa> passageiro{nullptr};\n\n    public:\n        Moto(): custo(0) , motorista(nullptr), passageiro(nullptr){}\n\n        int getCusto() const {\n            return custo;\n        }\n\n        std::string setDriver(std::shared_ptr<Pessoa> motoqueiro){\n            if(this->motorista != nullptr){\n                return \"Falha: j\u00e1 existe motorista\\n\";\n            }\n            motorista = motoqueiro;\n            return \"Motorista est\u00e1 na moto\\n\";\n        }\n\n        std::string setPass(std::shared_ptr<Pessoa> passageiro){\n            if(this->motorista == nullptr){\n                return \"Falha, n\u00e3o h\u00e1 motorista\\n\";\n            }\n            this->passageiro = passageiro;\n            return \"passageiro subiu na moto\\n\";\n        }\n\n        std::string dirigir(int distancia){\n            if(motorista == nullptr){\n                return \"Falha, n\u00e3o h\u00e1 motorista\\n\";\n            }\n            if(passageiro == nullptr){\n                return \"Falha, n\u00e3o h\u00e1 passageiro\\n\";\n            }\n            \n            custo += distancia;\n            return \"A moto est\u00e1 andando\\n\";\n        }\n\n        std::string leavePass(){\n            if(passageiro == nullptr){\n                return \"Falha, n\u00e3o h\u00e1 passageiro\\n\";\n            }\n            if (passageiro->getDinheiro() < custo) {\n                std::cout << \"fail: Passenger does not have enough money\\n\";\n            }\n            motorista->motoristaRecebendo(custo);\n            passageiro->passageiroPagando(custo);\n            std::string mensagem = fn::format(\"{}:{} leave\\n\", passageiro->getNome(), passageiro->getDinheiro());\n            custo = 0;\n            passageiro = nullptr;\n            return mensagem;\n        }\n\n        std::string str() const {\n            std::string motoristaStr = motorista ? motorista->str() : \"None\";\n            std::string passageiroStr = passageiro ? passageiro->str() : \"None\";\n            return fn::format(\"Cost: {}, Driver: {}, Passenger: {}\", custo, motoristaStr, passageiroStr);\n        }\n};\n\n\nclass Adapter {\n    Moto moto;\npublic:\n    void setDriver(std::string nome, int dinheiro) {\n        moto.setDriver(std::make_shared<Pessoa>(nome, dinheiro));\n    }\n    void setPass(std::string nome, int dinheiro) {\n        moto.setPass(std::make_shared<Pessoa>(nome, dinheiro));\n    }\n    void drive(int distance) {\n       moto.dirigir(distance);\n    }\n    void leavePass() {\n    std::cout << moto.leavePass();\n    }\n    void show() {\n        std::cout << moto.str() << std::endl;\n\n    }\n};\n\nint main() {\n    Adapter adp;\n    while (true) {\n        fn::write(\"$\", \"\");\n        auto line = fn::input();\n        auto args = fn::split(line, ' ');\n        fn::write(line);\n\n        if      (args[0] == \"end\")       { break;                                  }\n        else if (args[0] == \"setDriver\") { adp.setDriver(args[1], +args[2]);       }\n        else if (args[0] == \"setPass\")   { adp.setPass(args[1], +args[2]);         }\n        else if (args[0] == \"drive\")     { adp.drive(+args[1]);                    }\n        else if (args[0] == \"leavePass\") { adp.leavePass();                        }\n        else if (args[0] == \"show\")      { adp.show();                             }\n        else                             { fn::write(\"fail: command not found\\n\"); }\n    }\n}"
        }
    ]
}