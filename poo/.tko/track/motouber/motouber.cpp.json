{
    "patches": [
        {
            "label": "2024-12-11_19-36-11",
            "content": "@@ -549,29 +549,8 @@\n nome\n-, %22:%22, this-%3Edinheiro\n ;%0A  \n@@ -937,1041 +937,26 @@\n  %7D%0A%0A\n-        void setDriver(std::shared_ptr%3CPessoa%3E motorista)%7B%0A            this-%3Emotorista = motorista;%0A        %7D%0A%0A        void setPass(std::shared_ptr%3CPessoa%3E passageiro)%7B%0A            this-%3Epassageiro = passageiro;%0A        %7D%0A%0A        std::string str()%7B%0A            if(motorista == nullptr && passageiro == nullptr)%7B%0A                return %22Cost: %22 ,this-%3Ecusto, %22, Driver: None%22 , %22,Passenger: None%22, %22%5Cn%22;%0A            %7D%0A            if(passageiro == nullptr)%7B%0A                return %22Cost: %22 ,this-%3Ecusto, %22, Driver: %22 , this-%3Emotorista, %22,Passenger: None%22, %22%5Cn%22;%0A            %7D%0A            if(motorista == nullptr)%7B%0A                return %22Cost: %22 ,this-%3Ecusto, %22, Driver: None%22, %22,Passenger: %22, this-%3Epassageiro, %22%5Cn%22;%0A            %7D%0A            return %22Cost: %22 ,this-%3Ecusto, %22, Driver: %22 , this-%3Emotorista, %22,Passenger: %22, this-%3Epassageiro, %22%5Cn%22;%0A        %7D%0A%0A        void dirigir()%7B%0A            if(this-%3Emotorista == nullptr)%7B%0A                return;%0A            %7D%0A        %7D%0A%0A        %0A%0A%7D;%0A%0Aclass Adapter%7B%0A    Moto moto;%0A    public:%0A    \n+%7D;%0A%0Aclass Adapter%7B\n %0A   \n@@ -1087,27 +1087,8 @@\n ()%7B%0A\n-        moto.str();\n %0A   \n"
        },
        {
            "label": "2024-12-11_20-12-02",
            "content": "@@ -1220,36 +1220,406 @@\n     \n-return fn::format(\n+if(motorista == nullptr && passageiro == nullptr)%7B%0A                return %22Cost: %22 ,this-%3Ecusto, %22, Driver: None%22 , %22,Passenger: None%22, %22%5Cn%22;%0A            %7D%0A            if(passageiro == nullptr)%7B%0A                return %22Cost: %22 ,this-%3Ecusto, %22, Driver: %22 , this-%3Emotorista, %22,Passenger: None%22, %22%5Cn%22;%0A            %7D%0A            if(motorista == nullptr)%7B%0A                return \n %22Co\n-n\n st: \n-%7B%7D\n+%22 ,this-%3Ecusto, %22\n , Dr\n@@ -1628,12 +1628,17 @@\n er: \n-%7B%7D, \n+None%22, %22,\n Pass\n@@ -1648,26 +1648,104 @@\n er: \n-%7B%7D%5Cn%22, this-%3Ecusto\n+%22, this-%3Epassageiro, %22%5Cn%22;%0A            %7D%0A            return %22Cost: %22 ,this-%3Ecusto, %22, Driver: %22 \n , th\n@@ -1758,16 +1758,32 @@\n torista,\n+ %22,Passenger: %22,\n  this-%3Ep\n@@ -1791,17 +1791,22 @@\n ssageiro\n-)\n+, %22%5Cn%22\n ;%0A      \n"
        },
        {
            "label": "2024-12-11_20-15-18",
            "content": "#include <iostream>\n#include \"fn.hpp\"\n\nclass Pessoa{\n    private:\n        std::string nome;\n        int dinheiro{0};\n    public:\n        Pessoa(std::string nome, int dinheiro){\n            this->nome = nome;\n            this->dinheiro = dinheiro;\n        }\n\n        std::string getNome() const{\n            return nome;\n        }\n\n        int getDinheiro() const{\n            return dinheiro;\n        }\n\n        int setDinheiro(int novoValor){\n            this->dinheiro = novoValor;\n        } \n\n        std::string str(){\n            return this->nome, \":\", this->dinheiro;\n        }\n\n};\n\n\nclass Moto{\n    private:\n        int custo{0};\n        std::shared_ptr<Pessoa>  passageiro{nullptr};\n        std::shared_ptr<Pessoa> motorista{nullptr};\n\n    public:\n        Moto(std::shared_ptr<Pessoa> passageiro, std::shared_ptr<Pessoa> motorista){\n            this->custo = 0;\n            this->passageiro = nullptr;\n            this->motorista = nullptr;\n        }\n\n        void setDriver(std::shared_ptr<Pessoa> motorista){\n            this->motorista = motorista;\n        }\n\n        void setPass(std::shared_ptr<Pessoa> passageiro){\n            this->passageiro = passageiro;\n        }\n\n        std::string str(){\n            return fn::format(\"Const: {}, Driver: {}, Passenger: {}\\n\", this->custo, this->motorista, this->passageiro);\n        }\n\n        void dirigir(){\n            if(this->motorista == nullptr){\n                return;\n            }\n        }\n\n        \n\n};\n\nclass Adapter{\n    Moto moto;\n    public:\n    \n    void setDriver(){\n\n    }\n\n    void setPass(){\n\n    }\n\n    void drive(){\n\n    }\n\n    void leavePass(){\n\n    }\n\n    void show(){\n        moto.str();\n    }\n};\n\nint main() {\n    Adapter adp;\n    while (true) {\n        fn::write(\"$\", \"\");\n        auto line = fn::input();\n        auto args = fn::split(line, ' ');\n        fn::write(line);\n\n        if      (args[0] == \"end\")       { break;                                  }\n        else if (args[0] == \"setDriver\") { adp.setDriver(args[1], +args[2]);       }\n        else if (args[0] == \"setPass\")   { adp.setPass(args[1], +args[2]);         }\n        else if (args[0] == \"drive\")     { adp.drive(+args[1]);                    }\n        else if (args[0] == \"leavePass\") { adp.leavePass();                        }\n        else if (args[0] == \"show\")      { adp.show();                             }\n        else                             { fn::write(\"fail: command not found\\n\"); }\n    }\n}"
        }
    ]
}