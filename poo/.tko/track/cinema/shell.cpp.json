{
    "patches": [
        {
            "label": "2025-02-09_20-53-53",
            "content": "#include <iostream>\n#include <vector>\n#include <sstream>\n#include <memory>\nusing namespace std;\n\ntemplate<class CONTAINER, class FUNC>\nstring map_join(const CONTAINER& c, FUNC f, string sep) {\n    stringstream ss;\n    for (auto it = c.begin(); it != c.end(); it++) {\n        ss << (it == c.begin() ? \"\" : sep);\n        ss << f(*it);\n    }\n    return ss.str();\n}\n\nclass Client{\n    private:\n        string id;\n        int phone;\n    \n    public:\n        Client(string id = \"-\", int phone = 0) : id(id), phone(phone){}\n\n        string getId(){\n            return id;\n        }\n\n        int getPhone(){\n            return phone;\n        }\n\n        void setId(string newId){\n            this->id = newId;\n        }\n\n        void setPhone(int newPhone){\n            this->phone = newPhone;\n        }\n\n        string str() const{\n            stringstream ss;\n            ss << this->id << \":\" << this->phone ;\n            return ss.str();\n        }\n};\n\nclass Theater{\n    private:\n        vector<shared_ptr<Client>> seats;\n\n    public:\n        Theater(int index) {\n            seats = vector<shared_ptr<Client>>(index, nullptr);\n        };\n\n        \n\n        void reserve(string id, int phone, int index){\n            if(index < 0 || index >= (int)seats.size()){\n                cout << \"fail: cadeira nao existe\\n\";\n                return;\n            }\n            if(seats[index] != nullptr){\n                cout << \"fail: cadeira ja esta ocupada\\n\";\n                return;\n            }\n            for (auto& seat : seats) {\n                if (seat && seat->getId() == id) {\n                    cout << \"fail: cliente ja esta no cinema\\n\";\n                    return;\n                }\n            }\n            seats[index] = make_shared<Client>(id, phone);\n        }\n\n        void cancel(string id){\n            for (auto& seat : seats) {\n                if (seat && seat->getId() == id) {\n                    seat = nullptr;\n                    return;\n                }\n            }\n            cout << \"fail: cliente nao esta no cinema\\n\";\n        }\n\n        void show(){\n            if (seats.empty()) {\n                cout << \"[]\" << endl;\n                return;\n            }\n            cout << \"[\" << map_join(seats, [](shared_ptr<Client> c) {\n                return c ? c->str() : \"-\";\n            }, \" \") << \"]\" << endl;\n        }\n\n        \n};\n\nint main() {\n    Theater theater(0);\n    while (true) {\n        string line, cmd;\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n\n        stringstream ss(line);\n        ss >> cmd;\n\n        if (cmd == \"end\") {\n            break;    \n        } else if (cmd == \"show\") {\n            theater.show();\n        } else if (cmd == \"init\") {\n            int qtd;\n            ss >> qtd;\n            theater = Theater(qtd);\n        } else if (cmd == \"reserve\") {\n            string id;\n            int phone = 0;\n            int index = 0;\n            ss >> id >> phone >> index;\n            theater.reserve(id, phone, index);\n        } else if (cmd == \"cancel\") {\n            string id;\n            ss >> id;\n            theater.cancel(id);\n        } else {\n            cout << \"fail: comando invalido\" << endl;\n        }\n    }\n}\n"
        }
    ]
}