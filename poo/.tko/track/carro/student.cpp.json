{
    "patches": [
        {
            "label": "2025-02-25_21-36-29",
            "content": "#include \"fn.hpp\"\n\nstruct Car\n{\n    int pass = 0;\n    int passMax = 2;\n    int gas = 0;\n    int gasMax = 100;\n    int km = 0;\n\n    // metodo especial constructor inicializando atributos//\n    Car()\n    {\n        this->pass = 0;\n        this->passMax = 2;\n        this->gas = 0;\n        this->gasMax = 100;\n        this->km = 0;\n    }\n\n    void enter()\n    {\n        pass++;\n        if (pass > passMax)\n        {\n            pass = 2;\n            std::cout << \"fail: limite de pessoas atingido\" << std::endl;\n        }\n    }\n\n    std::string str()\n    {\n        return \"pass: \" + std::to_string(pass) + \", gas: \" + std::to_string(gas) + \", km: \" + std::to_string(km);\n    }\n\n    void leave()\n    {\n        pass--;\n        if (pass < 0)\n        {\n            pass = 0;\n            std::cout << \"fail: nao ha ninguem no carro\" << std::endl;\n        }\n    }\n\n    void fuel(int abasteceu)\n    {\n        gas += abasteceu;\n        if (gas > gasMax)\n        {\n            gas = gasMax;\n        }\n    }\n\n    void drive(int dist)\n    {\n        if (pass == 0)\n        {\n            std::cout << \"fail: nao ha ninguem no carro\" << std::endl;\n            return;\n        }\n\n        if (gas == 0)\n        {\n            std::cout << \"fail: tanque vazio\" << std::endl;\n            return;\n        }\n\n        if (dist > gas)\n        {\n            km += gas;\n            std::cout << \"fail: tanque vazio apos andar \" << gas << \" km\" << std::endl;\n            gas = 0;\n            return;\n        }\n\n        gas -= dist;\n        km += dist;\n    }\n};\n\nstruct Student\n{\n    Car car;\n    Student() : car()\n    {\n        car = Car();\n    }\n\n    void enter()\n    {\n        car.enter();\n    }\n    void leave()\n    {\n        car.leave();\n    }\n    void fuel(int q)\n    {\n        car.fuel(q);\n        (void)q;\n    }\n    void drive(int q)\n    {\n        car.drive(q);\n        (void)q;\n    }\n    void show()\n    {\n        std::cout << car.str() << std::endl;\n    }\n};\n\nstruct Debug\n{\n    // Se a vari\u00e1vel debug for true, os testes n\u00e3o ser\u00e3o executados\n    // Apenas o conte\u00fado do m\u00e9todo run() ser\u00e1 executado\n    // Voc\u00ea pode usar isso para testar seu c\u00f3digo manualmente\n    static const bool debug = false;\n    static void run()\n    {\n        std::cout << \"Debug ativado\" << std::endl;\n    }\n};\n"
        }
    ]
}