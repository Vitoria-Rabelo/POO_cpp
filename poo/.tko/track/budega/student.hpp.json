{
    "patches": [
        {
            "label": "2025-02-25_21-36-38",
            "content": "/*Parte feita em sala acompanhando o professor e continuei sozinha em casa\nConceitos aprendidos: vetores, listas, uso de ponteiro e passagens por referencia*/\n#define __LIST\n#define __MEMORY\n#pragma once\n#include \"fn.hpp\"\n#include <vector>\n#include <memory>\n#include <iostream>\n#include <algorithm>\n#include <list>\n\nclass Pessoa{\n    private:\n        std::string nome;\n    public:\n        Pessoa(std::string nome = \"\"){\n            this->nome = nome;\n        }\n\n        std::string getNome() const{\n            return nome;\n        }\n\n        std::string str() const{\n            return this->nome;\n        }\n};\n\nclass Mercantil{\n    std::vector<std::shared_ptr<Pessoa>> caixas; //insere e remove, come\u00e7a nulo as posicoes.\n    std::list<std::shared_ptr<Pessoa>> fila; //a fila anda: pessoa da posicao anterior fica na posicaoAnterior + 1; come\u00e7a vazio.\n\n    public:\n        Mercantil(int n_caixas = 0 ){\n            //inicia as posicoes do vetor com nullptr\n            for(int i = 0; i < n_caixas; i++){\n                caixas.push_back(nullptr);\n            }\n        }\n\n\n    void chamarNoCaixa(int indice){\n        if(caixas[indice] != nullptr){\n            std::cout << \"fail: caixa ocupado\\n\";\n            return;\n        }\n        if(fila.size() == 0){\n            std::cout << \"fail: sem clientes\\n\";\n            return;\n        }\n        //a primeira pessoa da fila vai ocupar a posicao (indice) do vetor\n        caixas[indice] = fila.front();\n        //removendo a pessoa da fila de espera\n        fila.pop_front();\n    }\n\n    void chegar(std::shared_ptr<Pessoa> pessoa){\n        fila.push_back(pessoa);\n    }\n\n    void finalizar(size_t indice){\n        if(indice >= caixas.size()){\n            std::cout << \"fail: caixa inexistente\\n\";\n            return;\n        }\n        if(caixas[indice] == nullptr){\n            std::cout << \"fail: caixa vazio\\n\";\n            return;\n        }\n        caixas[indice] = nullptr;\n    }\n\n    std::string str() const {\n        std::stringstream ss;\n        ss << \"Caixas: [\";\n        int i = 0;\n        for (auto elem : caixas) {\n            ss << (i++ != 0 ? \", \" : \"\");\n            ss << (elem ? elem->str() : \"-----\");\n        }\n        ss << \"]\\nEspera: [\";\n        bool first = true;\n        for (auto elem : fila) {\n            ss << (!first ? \", \" : \"\") << (elem ? elem->str() : \"\");\n            first = false;\n        }\n        ss << \"]\";\n        return ss.str();\n}\n};\n\nclass Adapter {\n    Mercantil bank;\npublic:\n    void init(int qtd_caixas) {\n        bank = Mercantil(qtd_caixas);\n    }\n    void call(int indice) {\n        bank.chamarNoCaixa(indice);\n    }\n    void finish(int indice) {\n        bank.finalizar(indice);\n    }\n    void arrive(const std::string& nome) {\n        bank.chegar(std::make_shared<Pessoa>(nome));\n    }\n\n    void show() {\n        fn::write(bank.str());\n    }\n};\n"
        }
    ]
}