{
    "patches": [
        {
            "label": "2025-02-25_20-15-17",
            "content": "#include <iostream>\n#include <sstream>\n#include <vector>\n#include <iomanip>\n#include <sstream>\n#include <list>\n\nusing namespace std;\n\ntemplate <class CONTAINER, class FUNC>\nstring map_join(const CONTAINER &cont, FUNC func, string sep = \" \")\n{\n    stringstream ss;\n    for (auto it = cont.begin(); it != cont.end(); it++)\n    {\n        ss << (it == cont.begin() ? \"\" : sep) << func(*it);\n    }\n    return ss.str();\n}\n\nclass Fone{\n    string id;\n    string number;\n\npublic:\n    Fone(string id = \"\", string number = \"\"){\n        this->id = id;\n        this->number = number;\n    }\n\n    string getId(){\n        return id;\n    }\n\n    string getNumber(){\n        return number;\n    }\n\n    bool isValidNumber() {\n        for (char c : number) {\n            if (!isdigit(c) && c != '(' && c != ')' && c != '-' && c != '.') {\n                cout << \"fail: invalid number\" << endl;\n                return false;\n            }\n        }\n        return true;\n    }\n\n\n    string toString(){\n        return id + \":\" + number;\n    }\n};\n\nclass Contact{\n    string name;\n    bool favorited;\n    vector<Fone> fones;\npublic:\n    Contact(string name = \"\"){\n        this->name = name;\n        this->favorited = false;\n    }\n\n    string getName(){\n        return name;\n    }\n\n    void add(Fone fone){\n        if (!fone.isValidNumber()) {\n             return;\n        }\n        fones.push_back(fone);\n    }\n\n    void rm(int index){\n        fones.erase(fones.begin() + index);\n    }\n\n    void isFavorited(){\n        favorited = !favorited;\n    }\n    string str() {\n        stringstream ss;\n        ss << (favorited ? \"@ \" : \"- \") << getName() \n           << \" [\" << map_join(fones, [](Fone fone) { return fone.toString(); }, \", \") << \"]\";\n        return ss.str();\n    }\n    \n};  \n\nint main()\n{\n    Contact contact(\"vitoria\");\n    while (true)\n    {\n        string line, cmd;\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n        stringstream ss(line);\n        ss >> cmd;\n\n        if (cmd == \"end\")\n        {\n            break;\n        }\n        else if (cmd == \"init\")\n        {\n            string name;\n            ss >> name;\n            contact = Contact(name);\n        }\n        else if (cmd == \"add\")\n        {\n            string id, number;\n            ss >> id >> number;\n            contact.add(Fone(id, number));\n        }\n        else if (cmd == \"rm\")\n        {\n            int index{};\n            ss >> index;\n            contact.rm(index);\n        }\n        else if (cmd == \"tfav\")\n        {\n            contact.isFavorited();\n        }\n        else if (cmd == \"show\")\n        {\n            cout << contact.str() << endl;\n        }\n        else\n        {\n            cout << \"fail: comando invalido\" << endl;\n        }\n    }\n}\n"
        }
    ]
}