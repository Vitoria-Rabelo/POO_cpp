{
    "patches": [
        {
            "label": "2024-12-19_17-23-11",
            "content": "@@ -443,1906 +443,20 @@\n %0A%7D%0A%0A\n-class Grafite%7B%0A    private:%0A        float calibre;%0A        int tamanho;%0A        std::string dureza;%0A%0A    public:%0A        Grafite(float calibre = 0, int tamanho = 0, std::string dureza = %22%22): calibre(calibre), tamanho(tamanho), dureza(dureza)%7B%7D%0A%0A        float getCalibre() const%7B%0A            return this-%3Ecalibre;%0A        %7D%0A        std::string str() const%7B%0A            stringstream ss;%0A            ss %3C%3C %22%5B%22 %3C%3C calibre %3C%3C %22:%22 %3C%3C dureza %3C%3C %22:%22 %3C%3C tamanho %3C%3C %22%5D%22;%0A            return ss.str();%0A        %7D%0A%7D;%0A%0Aclass Lapiseira%7B%0A    private:%0A        float calibre%7B0%7D;%0A        std::shared_ptr%3CGrafite%3E bico%7Bnullptr%7D;%0A        list%3Cstd::shared_ptr%3CGrafite%3E%3E tambor;%0A    public:%0A        Lapiseira(float calibre = 0): calibre(calibre)%7B%7D%0A%0A        void insert(shared_ptr%3CGrafite%3Egrafite)%7B%0A            if(this-%3Ecalibre != grafite-%3EgetCalibre())%7B%0A                std::cout %3C%3C %22fail: calibre incompat%C3%ADvel%5Cn%22;%0A                return;%0A            %7D%0A            tambor.push_back(grafite);%0A        %7D%0A%0A        void puxar()%7B%0A            if(bico != nullptr)%7B%0A                std::cout%3C%3C %22fail: ja existe grafite no bico%5Cn%22;%0A                return;%0A            %7D%0A            if(tambor.empty())%7B%0A                std::cout %3C%3C %22fail: tambor vazio%5Cn%22;%0A                return;%0A            %7D%0A            this-%3Ebico = tambor.front();%0A            tambor.pop_front();%0A        %7D%0A%0A        void remove()%7B%0A            if(this-%3Ebico != nullptr)%7B%0A                std::cout %3C%3C %22fail: nao existe grafite%5Cn%22;%0A            %7D%0A            this-%3Ebico = nullptr;%0A        %7D%0A%0A        std::string str() const %7B%0A            stringstream ss;%0A            auto lstr = %5B%5D(auto x) %7Breturn x-%3Estr();%7D;%0A            ss %3C%3C %22calibre: %22 %3C%3C this-%3Ecalibre %3C%3C %22, bico: %22 %3C%3C (bico != nullptr ? bico-%3Estr() : %22%5B%5D%22)%0A            %3C%3C %22, tambor: %3C%22 %3C%3C map_join(tambor, lstr, %22%22) %3C%3C %22%3E%22;%0A            return ss.str();%0A        %7D%0A%0A%7D;%0A%0Aint main() %7B%0A    Lapiseira lapiseira(0.5);\n+int main() %7B\n %0A   \n@@ -712,63 +712,8 @@\n  %7B %0A\n-            std::cout %3C%3C lapiseira.str() %3C%3C std::endl;%0A\n     \n@@ -757,32 +757,35 @@\n ) %7B %0A           \n+ //\n  float calibre;%0A\n@@ -787,32 +787,35 @@\n bre;%0A           \n+ //\n  ss %3E%3E calibre;%0A\n@@ -818,52 +818,8 @@\n re;%0A\n-            lapiseira = Lapiseira(calibre);%0A\n     \n@@ -873,16 +873,19 @@\n         \n+ //\n  float c\n@@ -900,24 +900,26 @@\n             \n+//\n  string dure\n@@ -933,16 +933,19 @@\n         \n+ //\n  int tam\n@@ -957,24 +957,27 @@\n %0A           \n+ //\n  ss %3E%3E calib\n@@ -1005,92 +1005,8 @@\n ho;%0A\n-            lapiseira.insert(std::make_shared%3CGrafite%3E (calibre, tamanho, dureza));%0A\n     \n@@ -1053,40 +1053,8 @@\n  %7B %0A\n-            lapiseira.remove();%0A\n     \n@@ -1099,39 +1099,8 @@\n  %7B %0A\n-            lapiseira.puxar();%0A\n     \n"
        },
        {
            "label": "2024-12-20_23-18-51",
            "content": "@@ -766,518 +766,8 @@\n   %7D%0A\n-        float getTamanho() const%7B%0A            return this-%3Etamanho;%0A        %7D%0A%0A        void usandoTamanho(int uso)%7B%0A            this-%3Etamanho -= uso;%0A        %7D%0A%0A        int usandoFolha()%7B%0A            if(dureza == %22HB%22)%7B%0A                return 1;%0A            %7D%0A            if(dureza == %222B%22)%7B%0A                return 2;%0A            %7D%0A            if(dureza == %224B%22)%7B%0A                return 4;%0A            %7D%0A            if(dureza == %226B%22)%7B%0A                return 6;%0A            %7D%0A            return 0;%0A        %7D%0A%0A%0A\n     \n@@ -787,32 +787,32 @@\n ng str() const%7B%0A\n+\n             stri\n@@ -1451,30 +1451,24 @@\n          if(\n-this-%3E\n bico != null\n@@ -1824,33 +1824,33 @@\n   if(this-%3Ebico \n-=\n+!\n = nullptr)%7B%0A    \n@@ -1967,523 +1967,8 @@\n  %7D%0A%0A\n-        void write()%7B%0A            if (this-%3Ebico == nullptr) %7B%0A            std::cout %3C%3C %22fail: nao existe grafite no bico%5Cn%22;%0A            return;%0A            %7D%0A            if (this-%3Ebico-%3EgetTamanho() %3C this-%3Ebico-%3EusandoFolha() %7C%7C this-%3Ebico-%3EgetTamanho() == 0) %7B%0A                std::cout %3C%3C %22fail: folha incompleta%5Cn%22 ;%0A                this-%3Ebico-%3EusandoTamanho(this-%3Ebico-%3EgetTamanho());%0A                return;%0A            %7D%0A            this-%3Ebico-%3EusandoTamanho(this-%3Ebico-%3EusandoFolha());%0A        %7D%0A        %0A\n     \n@@ -3213,32 +3213,32 @@\n r();%0A        %7D %0A\n+\n         else if \n@@ -3261,39 +3261,8 @@\n  %7B %0A\n-            lapiseira.write();%0A\n     \n"
        },
        {
            "label": "2024-12-21_12-05-26",
            "content": "#include <iostream>\n#include <list>\n#include <sstream>\n#include <memory>\nusing namespace std;\n\n// Fun\u00e7\u00e3o auxiliar para mapear e juntar elementos de um container\ntemplate <typename CONTAINER, typename FUNC>\nauto map_join(const CONTAINER& c, FUNC f, const string& sep = \", \") {\n    stringstream ss;\n    for (auto it = c.begin(); it != c.end(); ++it) {\n        ss << (it != c.begin() ? sep : \"\");\n        ss << f(*it);\n    }\n    return ss.str();\n}\n\nclass Grafite{\n    private:\n        float calibre;\n        int tamanho;\n        std::string dureza;\n\n    public:\n        Grafite(float calibre = 0, int tamanho = 0, std::string dureza = \"\"): calibre(calibre), tamanho(tamanho), dureza(dureza){}\n\n        float getCalibre() const{\n            return this->calibre;\n        }\n        float getTamanho() const{\n            return this->tamanho;\n        }\n\n        void usandoTamanho(int uso){\n            this->tamanho -= uso;\n        }\n\n        int usandoFolha(){\n            if(dureza == \"HB\"){\n                return 1;\n            }\n            if(dureza == \"2B\"){\n                return 2;\n            }\n            if(dureza == \"4B\"){\n                return 4;\n            }\n            if(dureza == \"6B\"){\n                return 6;\n            }\n            return 0;\n        }\n\n\n        std::string str() const{\n            stringstream ss;\n            ss << \"[\" << calibre << \":\" << dureza << \":\" << tamanho << \"]\";\n            return ss.str();\n        }\n};\n\nclass Lapiseira{\n    private:\n        float calibre{0};\n        std::shared_ptr<Grafite> bico{nullptr};\n        list<std::shared_ptr<Grafite>> tambor;\n    public:\n        Lapiseira(float calibre = 0): calibre(calibre){}\n\n        void insert(shared_ptr<Grafite>grafite){\n            if(this->calibre != grafite->getCalibre()){\n                std::cout << \"fail: calibre incompat\u00edvel\\n\";\n                return;\n            }\n            tambor.push_back(grafite);\n        }\n\n        void puxar(){\n            if(this->bico != nullptr){\n                std::cout<< \"fail: ja existe grafite no bico\\n\";\n                return;\n            }\n            if(tambor.empty()){\n                std::cout << \"fail: tambor vazio\\n\";\n                return;\n            }\n            this->bico = tambor.front();\n            tambor.pop_front();\n        }\n\n        void remove(){\n            if(this->bico == nullptr){\n                std::cout << \"fail: nao existe grafite\\n\";\n            }\n            this->bico = nullptr;\n        }\n\n        void write(){\n            if (this->bico == nullptr) {\n            std::cout << \"fail: nao existe grafite no bico\\n\";\n            return;\n            }\n            if (this->bico->getTamanho() < this->bico->usandoFolha() || this->bico->getTamanho() == 0) {\n                std::cout << \"fail: folha incompleta\\n\" ;\n                this->bico->usandoTamanho(this->bico->getTamanho());\n                return;\n            }\n            this->bico->usandoTamanho(this->bico->usandoFolha());\n        }\n        \n        std::string str() const {\n            stringstream ss;\n            auto lstr = [](auto x) {return x->str();};\n            ss << \"calibre: \" << this->calibre << \", bico: \" << (bico != nullptr ? bico->str() : \"[]\")\n            << \", tambor: <\" << map_join(tambor, lstr, \"\") << \">\";\n            return ss.str();\n        }\n\n};\n\nint main() {\n    Lapiseira lapiseira(0.5);\n    while (true) {\n        string line, cmd;\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n\n        stringstream ss(line);\n        ss >> cmd;\n\n        if (cmd == \"end\") {\n            break;  \n        }\n        else if (cmd == \"show\") { \n            std::cout << lapiseira.str() << std::endl;\n        } \n        else if (cmd == \"init\") { \n            float calibre;\n            ss >> calibre;\n            lapiseira = Lapiseira(calibre);\n        } \n        else if (cmd == \"insert\") { \n            float calibre;\n             string dureza;\n            int tamanho;\n            ss >> calibre >> dureza >> tamanho;\n            lapiseira.insert(std::make_shared<Grafite> (calibre, tamanho, dureza));\n        } \n        else if (cmd == \"remove\") { \n            lapiseira.remove();\n        } \n        else if (cmd == \"pull\") { \n            lapiseira.puxar();\n        } \n        else if (cmd == \"write\") { \n            lapiseira.write();\n        } \n        else {\n            cout << \"fail: comando invalido\\n\";\n        }\n    }\n}\n"
        }
    ]
}